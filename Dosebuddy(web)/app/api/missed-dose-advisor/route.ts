import { NextRequest, NextResponse } from 'next/server'
import { firebaseService, type Dose } from '@/lib/firebase-service'
import { githubModelsAI } from '@/lib/github-models-ai'

interface MissedDoseRequest {
  doseId: string
  userId?: string
}

export async function POST(request: NextRequest) {
  try {
    const { doseId, userId }: MissedDoseRequest = await request.json()
    
    if (!doseId) {
      return NextResponse.json(
        { error: 'Dose ID is required' },
        { status: 400 }
      )
    }
    
    // Initialize Firebase service
    await firebaseService.initialize()
    
    // Get user doses
    const doses = await firebaseService.getUserDoses()
    const dose = doses[doseId]
    
    if (!dose) {
      return NextResponse.json(
        { error: 'Dose not found' },
        { status: 404 }
      )
    }
    
    // Calculate delay
    const { hours: delayHours, displayText } = firebaseService.calculateDoseDelay(dose.time)
    
    // Get user profile for age
    const userProfile = await firebaseService.getUserProfile()
    
    // Get recent missed doses count
    const recentMissedDoses = await firebaseService.getMissedDosesInLastDays(3)
    
    // Get dispenser status
    const dispenserStatus = await firebaseService.getPillDispenserStatus()
    
    // Use GitHub Models AI for enhanced advice
    const aiAdvice = await githubModelsAI.getMedicationAdvice({
      medicationName: dose.name,
      delayHours,
      userAge: userProfile?.age,
      recentMissedDoses: recentMissedDoses.length,
      dispenserOnline: dispenserStatus?.isOnline || false,
      conditions: dose.conditions,
      medicationType: 'General' // Could be enhanced with medication classification
    })
    
    // Create notification for the advice
    await firebaseService.addNotification({
      data: { doseId },
      message: `AI advice generated for missed ${dose.name} dose`,
      read: false,
      type: 'missedDose'
    })
    
    return NextResponse.json({
      success: true,
      dose: {
        id: doseId,
        name: dose.name,
        scheduledTime: new Date(dose.time).toLocaleString(),
        delayTime: displayText,
        delayHours,
        chamber: dose.chamber,
        conditions: dose.conditions
      },
      userInfo: {
        age: userProfile?.age,
        recentMissedDoses: recentMissedDoses.length
      },
      dispenserStatus: {
        isOnline: dispenserStatus?.isOnline || false,
        lastDispenseSuccessful: dispenserStatus?.lastDispenseSuccessful || false
      },
      advice: aiAdvice,
      disclaimer: "This advice is generated by AI using GitHub Models. Always consult your healthcare provider before taking action.",
      aiPowered: true
    })
    
  } catch (error) {
    console.error('Error generating missed dose advice:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const doseId = searchParams.get('doseId')
    
    if (!doseId) {
      return NextResponse.json(
        { error: 'Dose ID is required' },
        { status: 400 }
      )
    }
    
    await firebaseService.initialize()
    const doses = await firebaseService.getUserDoses()
    const dose = doses[doseId]
    
    if (!dose) {
      return NextResponse.json(
        { error: 'Dose not found' },
        { status: 404 }
      )
    }
    
    const { hours: delayHours, displayText } = firebaseService.calculateDoseDelay(dose.time)
    
    return NextResponse.json({
      dose: {
        id: doseId,
        name: dose.name,
        scheduledTime: new Date(dose.time).toLocaleString(),
        delayTime: displayText,
        delayHours,
        status: dose.status
      }
    })
    
  } catch (error) {
    console.error('Error fetching dose info:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
