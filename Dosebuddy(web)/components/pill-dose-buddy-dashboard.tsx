"use client"

import { useState, useEffect, useCallback } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Bell, 
  Pill, 
  Clock, 
  Activity, 
  AlertTriangle, 
  CheckCircle, 
  XCircle,
  Wifi,
  WifiOff,
  Users,
  Calendar,
  TrendingUp,
  Plus,
  Settings,
  Home,
  FileText,
  Brain,
  BarChart3,
  Smartphone,
  Languages
} from 'lucide-react'
import { firebaseService, type Dose, type Notification, type PillDispenser } from '@/lib/firebase-service'
import EnhancedMedicationForm from '@/components/enhanced-medication-form'

// Comprehensive translations object for English and Hindi
const translations = {
  en: {
    // App and Navigation
    appName: "PillDoseBuddy",
    tagline: "Smart Medication Management System",
    aiPowered: "AI-Powered Healthcare",
    dashboard: "Dashboard",
    medications: "Medications", 
    schedule: "Schedule",
    members: "Members",
    reports: "Reports",
    aiAssistant: "AI Assistant",
    notifications: "Notifications",
    settings: "Settings",
    
    // Language
    english: "English",
    hindi: "हिंदी",
    
    // Member Management
    goodMorning: "Good Morning",
    goodAfternoon: "Good Afternoon", 
    goodEvening: "Good Evening",
    memberYou: "You",
    familyMember1: "Family Member 1",
    familyMember2: "Family Member 2",
    addMember: "Add Member",
    medicationSchedule: "Here's your medication schedule for today",
    
    // AI Assistant
    aiHealthAssistant: "AI Health Assistant",
    aiDescription: "Real-time monitoring and smart recommendations",
    smartAnalysis: "Smart Analysis",
    smartAnalysisDesc: "AI monitoring your medication patterns",
    smartAlerts: "Smart Alerts", 
    smartAlertsDesc: "Personalized medication reminders",
    healthInsights: "Health Insights",
    healthInsightsDesc: "Track adherence and health trends",
    active: "Active",
    
    // Status Cards
    smartDispenser: "Smart Dispenser",
    online: "Online",
    offline: "Offline",
    unread: "unread",
    missedDoses: "Missed Doses",
    pending: "pending",
    adherence: "Adherence",
    
    // Medications
    todaysMedications: "Today's Medications",
    allMedications: "All Medications",
    addMedication: "Add Medication",
    addNew: "Add New", 
    editMedication: "Edit Medication",
    deleteMedication: "Delete Medication",
    noMedicationsToday: "No medications scheduled for today",
    scheduleTodayMedications: "Schedule Today's Medications",
    noMedicationsFound: "No medications found",
    addFirstMedication: "Add Your First Medication",
    total: "total",
    taken: "Taken",
    missed: "Missed",
    upcoming: "Upcoming",
    chamber: "Chamber",
    
    // AI and Chat
    getAIAdvice: "Get AI Advice",
    aiMedicationAdvice: "AI Medication Advice",
    aiRecommendation: "AI Recommendation",
    reasoning: "Reasoning",
    nextSteps: "Next Steps",
    importantWarnings: "Important Warnings",
    medicalDisclaimer: "Medical Disclaimer",
    disclaimerText: "This advice is generated by AI for informational purposes only. Always consult your healthcare provider before making any medication decisions.",
    close: "Close",
    contactHealthcare: "Contact Healthcare Provider",
    missedDosesAttention: "Missed Doses Requiring Attention",
    aiChatTitle: "Chat with AI Assistant",
    aiChatPlaceholder: "Ask me about your medications, side effects, or health concerns...",
    aiChatSend: "Send",
    aiAnalyzing: "AI is analyzing...",
    aiTyping: "AI is typing...",
    
    // Reports and Analytics
    medicineReport: "Medicine Report",
    viewFullReport: "View Full Report",
    adherenceRate: "Adherence Rate",
    onTimeRate: "On-Time Rate", 
    thisWeek: "This Week",
    improvement: "improvement",
    missedDosesReport: "Missed Doses",
    thisMonth: "this month",
    nextRefill: "Next Refill",
    inDays: "In 8 days",
    
    // Quick Actions
    quickAIActions: "Quick AI Actions", 
    analyzeHealthTrends: "Analyze My Health Trends",
    getMissedDoseAdvice: "Get Missed Dose Advice",
    optimizeSchedule: "Optimize Schedule"
  },
  hi: {
    // App and Navigation  
    appName: "पिलडोज़बडी",
    tagline: "स्मार्ट दवा प्रबंधन प्रणाली",
    aiPowered: "AI-संचालित स्वास्थ्य सेवा",
    dashboard: "डैशबोर्ड",
    medications: "दवाएं",
    schedule: "समयसूची", 
    members: "सदस्य",
    reports: "रिपोर्ट",
    aiAssistant: "AI सहायक",
    notifications: "सूचनाएं",
    settings: "सेटिंग्स",
    
    // Language
    english: "English", 
    hindi: "हिंदी",
    
    // Member Management
    goodMorning: "सुप्रभात",
    goodAfternoon: "नमस्ते",
    goodEvening: "शुभ संध्या", 
    memberYou: "आप",
    familyMember1: "परिवारिक सदस्य 1",
    familyMember2: "परिवारिक सदस्य 2", 
    addMember: "सदस्य जोड़ें",
    medicationSchedule: "यहाँ आज के लिए आपकी दवा की समयसूची है",
    
    // AI Assistant
    aiHealthAssistant: "AI स्वास्थ्य सहायक",
    aiDescription: "वास्तविक समय निगरानी और स्मार्ट सुझाव",
    smartAnalysis: "स्मार्ट विश्लेषण",
    smartAnalysisDesc: "AI आपके दवा पैटर्न की निगरानी कर रहा है",
    smartAlerts: "स्मार्ट अलर्ट",
    smartAlertsDesc: "व्यक्तिगत दवा रिमाइंडर",
    healthInsights: "स्वास्थ्य अंतर्दृष्टि", 
    healthInsightsDesc: "पालन और स्वास्थ्य प्रवृत्तियों को ट्रैक करें",
    active: "सक्रिय",
    
    // Status Cards
    smartDispenser: "स्मार्ट डिस्पेंसर",
    online: "ऑनलाइन",
    offline: "ऑफलाइन", 
    unread: "अपठित",
    missedDoses: "छूटी हुई खुराक",
    pending: "लंबित",
    adherence: "पालन",
    
    // Medications
    todaysMedications: "आज की दवाएं",
    allMedications: "सभी दवाएं", 
    addMedication: "दवा जोड़ें",
    addNew: "नया जोड़ें",
    editMedication: "दवा संपादित करें",
    deleteMedication: "दवा हटाएं",
    noMedicationsToday: "आज के लिए कोई दवा निर्धारित नहीं है",
    scheduleTodayMedications: "आज की दवाओं का कार्यक्रम बनाएं",
    noMedicationsFound: "कोई दवा नहीं मिली",
    addFirstMedication: "अपनी पहली दवा जोड़ें",
    total: "कुल",
    taken: "ली गई",
    missed: "छूटी",
    upcoming: "आगामी", 
    chamber: "कक्ष",
    
    // AI and Chat
    getAIAdvice: "AI सलाह प्राप्त करें",
    aiMedicationAdvice: "AI दवा सलाह",
    aiRecommendation: "AI सिफारिश",
    reasoning: "तर्क",
    nextSteps: "अगले कदम",
    importantWarnings: "महत्वपूर्ण चेतावनी",
    medicalDisclaimer: "चिकित्सा अस्वीकरण",
    disclaimerText: "यह सलाह केवल सूचनात्मक उद्देश्यों के लिए AI द्वारा उत्पन्न की गई है। कोई भी दवा निर्णय लेने से पहले हमेशा अपने स्वास्थ्य सेवा प्रदाता से सलाह लें।",
    close: "बंद करें",
    contactHealthcare: "स्वास्थ्य सेवा प्रदाता से संपर्क करें",
    missedDosesAttention: "ध्यान देने वाली छूटी हुई खुराक",
    aiChatTitle: "AI सहायक के साथ चैट करें",
    aiChatPlaceholder: "अपनी दवाओं, साइड इफेक्ट्स या स्वास्थ्य चिंताओं के बारे में पूछें...",
    aiChatSend: "भेजें",
    aiAnalyzing: "AI विश्लेषण कर रहा है...",
    aiTyping: "AI टाइप कर रहा है...",
    
    // Reports and Analytics
    medicineReport: "दवा रिपोर्ट",
    viewFullReport: "पूर्ण रिपोर्ट देखें",
    adherenceRate: "पालन दर",
    onTimeRate: "समय पर दर",
    thisWeek: "इस सप्ताह",
    improvement: "सुधार",
    missedDosesReport: "छूटी हुई खुराक",
    thisMonth: "इस महीने",
    nextRefill: "अगली रिफिल",
    inDays: "8 दिनों में",
    
    // Quick Actions
    quickAIActions: "त्वरित AI क्रियाएं",
    analyzeHealthTrends: "मेरे स्वास्थ्य रुझानों का विश्लेषण करें",
    getMissedDoseAdvice: "छूटी हुई खुराक की सलाह लें",
    optimizeSchedule: "कार्यक्रम अनुकूलित करें"
  }
}

interface MissedDoseAdvice {
  recommendation: 'take_now' | 'take_with_adjustment' | 'skip_dose' | 'contact_healthcare'
  reasoning: string
  urgency: 'low' | 'medium' | 'high' | 'critical'
  nextSteps: string[]
  warnings?: string[]
  timeSensitive: boolean
}

interface DashboardNotification extends Notification {
  id: string
}

interface DashboardData {
  doses: Record<string, Dose>
  notifications: DashboardNotification[]
  dispenserStatus: PillDispenser | null
  unreadCount: number
}

export default function PillDoseBuddyDashboard() {
  const [dashboardData, setDashboardData] = useState<DashboardData>({
    doses: {},
    notifications: [],
    dispenserStatus: null,
    unreadCount: 0
  })
  const [loading, setLoading] = useState(true)
  const [selectedDose, setSelectedDose] = useState<string | null>(null)
  const [advice, setAdvice] = useState<MissedDoseAdvice | null>(null)
  const [loadingAdvice, setLoadingAdvice] = useState(false)
  const [showMedicationForm, setShowMedicationForm] = useState(false)
  const [selectedMember, setSelectedMember] = useState('sung')
  const [currentLanguage, setCurrentLanguage] = useState<'en' | 'hi'>('en')

  // Translation function
  const t = (key: string): string => {
    return translations[currentLanguage][key] || key
  }
  const [language, setLanguage] = useState<'en' | 'hi'>('en')

  // Multi-language support
  interface Translations {
    en: Record<string, string>
    hi: Record<string, string>
  }

  const translations: Translations = {
    en: {
      // Header
      appName: "PillDoseBuddy",
      tagline: "Smart Medication Management System",
      aiPowered: "AI-Powered Healthcare",
      
      // Member Selection
      goodMorning: "Good Morning",
      medicationSchedule: "Here's your medication schedule for today",
      addMember: "Add Member",
      you: "You",
      familyMember1: "Family Member 1",
      familyMember2: "Family Member 2",
      
      // AI Assistant
      aiHealthAssistant: "AI Health Assistant",
      aiDescription: "Real-time monitoring and smart recommendations",
      active: "Active",
      smartAnalysis: "Smart Analysis",
      smartAnalysisDesc: "AI monitoring your medication patterns",
      smartAlerts: "Smart Alerts",
      smartAlertsDesc: "Personalized medication reminders",
      healthInsights: "Health Insights",
      healthInsightsDesc: "Track adherence and health trends",
      
      // Status Cards
      smartDispenser: "Smart Dispenser",
      online: "Online",
      offline: "Offline",
      notifications: "Notifications",
      unread: "unread",
      missedDoses: "Missed Doses",
      pending: "pending",
      adherence: "Adherence",
      
      // Medications
      todaysMedications: "Today's Medications",
      addMedication: "Add Medication",
      allMedications: "All Medications",
      total: "total",
      addNew: "Add New",
      chamber: "Chamber",
      taken: "Taken",
      missed: "Missed",
      upcoming: "Upcoming",
      editMedication: "Edit Medication",
      deleteMedication: "Delete Medication",
      addFirstMedication: "Add Your First Medication",
      scheduleTodayMedications: "Schedule Today's Medications",
      noMedicationsToday: "No medications scheduled for today",
      noMedicationsFound: "No medications found",
      
      // AI Actions
      aiQuickActions: "AI Quick Actions",
      analyzeHealthTrends: "Analyze My Health Trends",
      getMissedDoseAdvice: "Get Missed Dose Advice",
      optimizeSchedule: "Optimize Schedule",
      getAiAdvice: "Get AI Advice",
      
      // Reports
      medicineReport: "Medicine Report",
      viewFullReport: "View Full Report",
      adherenceRate: "Adherence Rate",
      onTimeRate: "On-Time Rate",
      thisWeek: "This Week",
      improvement: "improvement",
      missedDosesReport: "Missed Doses",
      thisMonth: "this month",
      nextRefill: "Next Refill",
      inDays: "In 8 days",
      
      // Dispenser
      bedroomDispenser: "Bedroom Dispenser",
      pillsRemaining: "Pills Remaining",
      low: "Low",
      syncDispenser: "Sync Dispenser",
      
      // Notifications
      recentNotifications: "Recent Notifications",
      new: "new",
      noNotifications: "No notifications",
      
      // Dispenser Details
      dispenserDetails: "Smart Dispenser Details",
      connectionStatus: "Connection Status",
      connected: "Connected",
      disconnected: "Disconnected",
      lastDispense: "Last Dispense",
      successful: "Successful",
      failed: "Failed",
      lastSeen: "Last Seen",
      
      // AI Advice
      aiMedicationAdvice: "AI Medication Advice",
      aiRecommendation: "AI Recommendation",
      reasoning: "Reasoning",
      nextSteps: "Next Steps",
      importantWarnings: "Important Warnings",
      medicalDisclaimer: "Medical Disclaimer",
      disclaimerText: "This advice is generated by AI for informational purposes only. Always consult your healthcare provider before making any medication decisions.",
      close: "Close",
      contactHealthcare: "Contact Healthcare Provider",
      
      // Missed Doses
      missedDosesAttention: "Missed Doses Requiring Attention",
      scheduled: "Scheduled",
      missedBy: "Missed by",
      conditions: "Conditions",
      
      // Language
      language: "Language",
      english: "English",
      hindi: "हिंदी"
    },
    hi: {
      // Header
      appName: "पिल डोज़ बडी",
      tagline: "स्मार्ट दवा प्रबंधन प्रणाली",
      aiPowered: "एआई-संचालित स्वास्थ्य सेवा",
      
      // Member Selection
      goodMorning: "सुप्रभात",
      medicationSchedule: "यहाँ आज के लिए आपकी दवा की समय-सारणी है",
      addMember: "सदस्य जोड़ें",
      you: "आप",
      familyMember1: "परिवारी सदस्य 1",
      familyMember2: "परिवारी सदस्य 2",
      
      // AI Assistant
      aiHealthAssistant: "एआई स्वास्थ्य सहायक",
      aiDescription: "वास्तविक समय निगरानी और स्मार्ट सिफारिशें",
      active: "सक्रिय",
      smartAnalysis: "स्मार्ट विश्लेषण",
      smartAnalysisDesc: "एआई आपकी दवा के पैटर्न की निगरानी कर रहा है",
      smartAlerts: "स्मार्ट अलर्ट",
      smartAlertsDesc: "व्यक्तिगत दवा अनुस्मारक",
      healthInsights: "स्वास्थ्य अंतर्दृष्टि",
      healthInsightsDesc: "पालन और स्वास्थ्य प्रवृत्तियों को ट्रैक करें",
      
      // Status Cards
      smartDispenser: "स्मार्ट डिस्पेंसर",
      online: "ऑनलाइन",
      offline: "ऑफलाइन",
      notifications: "अधिसूचनाएं",
      unread: "अपठित",
      missedDoses: "छूटी खुराकें",
      pending: "लंबित",
      adherence: "पालन",
      
      // Medications
      todaysMedications: "आज की दवाएं",
      addMedication: "दवा जोड़ें",
      allMedications: "सभी दवाएं",
      total: "कुल",
      addNew: "नई जोड़ें",
      chamber: "कक्ष",
      taken: "ली गई",
      missed: "छूटी",
      upcoming: "आगामी",
      editMedication: "दवा संपादित करें",
      deleteMedication: "दवा हटाएं",
      addFirstMedication: "अपनी पहली दवा जोड़ें",
      scheduleTodayMedications: "आज की दवाओं को निर्धारित करें",
      noMedicationsToday: "आज कोई दवा निर्धारित नहीं है",
      noMedicationsFound: "कोई दवा नहीं मिली",
      
      // AI Actions
      aiQuickActions: "एआई त्वरित कार्य",
      analyzeHealthTrends: "मेरी स्वास्थ्य प्रवृत्तियों का विश्लेषण करें",
      getMissedDoseAdvice: "छूटी खुराक सलाह प्राप्त करें",
      optimizeSchedule: "कार्यक्रम अनुकूलित करें",
      getAiAdvice: "एआई सलाह प्राप्त करें",
      
      // Reports
      medicineReport: "दवा रिपोर्ट",
      viewFullReport: "पूरी रिपोर्ट देखें",
      adherenceRate: "पालन दर",
      onTimeRate: "समय पर दर",
      thisWeek: "इस सप्ताह",
      improvement: "सुधार",
      missedDosesReport: "छूटी खुराकें",
      thisMonth: "इस महीने",
      nextRefill: "अगली रिफिल",
      inDays: "8 दिनों में",
      
      // Dispenser
      bedroomDispenser: "बेडरूम डिस्पेंसर",
      pillsRemaining: "बची हुई गोलियां",
      low: "कम",
      syncDispenser: "डिस्पेंसर सिंक करें",
      
      // Notifications
      recentNotifications: "हाल की अधिसूचनाएं",
      new: "नई",
      noNotifications: "कोई अधिसूचना नहीं",
      
      // Dispenser Details
      dispenserDetails: "स्मार्ट डिस्पेंसर विवरण",
      connectionStatus: "कनेक्शन स्थिति",
      connected: "जुड़ा हुआ",
      disconnected: "डिस्कनेक्ट",
      lastDispense: "अंतिम डिस्पेंस",
      successful: "सफल",
      failed: "असफल",
      lastSeen: "अंतिम बार देखा गया",
      
      // AI Advice
      aiMedicationAdvice: "एआई दवा सलाह",
      aiRecommendation: "एआई सिफारिश",
      reasoning: "तर्क",
      nextSteps: "अगले कदम",
      importantWarnings: "महत्वपूर्ण चेतावनियां",
      medicalDisclaimer: "चिकित्सा अस्वीकरण",
      disclaimerText: "यह सलाह केवल सूचनात्मक उद्देश्यों के लिए एआई द्वारा उत्पन्न की गई है। कोई भी दवा निर्णय लेने से पहले हमेशा अपने स्वास्थ्य सेवा प्रदाता से सलाह लें।",
      close: "बंद करें",
      contactHealthcare: "स्वास्थ्य सेवा प्रदाता से संपर्क करें",
      
      // Missed Doses
      missedDosesAttention: "ध्यान देने योग्य छूटी खुराकें",
      scheduled: "निर्धारित",
      missedBy: "द्वारा छूटी",
      conditions: "स्थितियां",
      
      // Language
      language: "भाषा",
      english: "English",
      hindi: "हिंदी"
    }
  }

  // Handle edit and delete functions
  const handleEditMedication = useCallback((doseId: string) => {
    console.log('Edit medication:', doseId)
    // TODO: Implement edit functionality
    alert('Edit functionality coming soon!')
  }, [])

  const handleDeleteMedication = useCallback(async (doseId: string) => {
    if (window.confirm('Are you sure you want to delete this medication?')) {
      try {
        // TODO: Implement delete functionality
        console.log('Delete medication:', doseId)
        alert('Delete functionality coming soon!')
      } catch (error) {
        console.error('Error deleting medication:', error)
        alert('Failed to delete medication. Please try again.')
      }
    }
  }, [])

  // Initialize Firebase and set up real-time listeners
  useEffect(() => {
    let unsubscribeFunctions: (() => void)[] = []

    const initializeApp = async () => {
      try {
        await firebaseService.initialize()
        
        // Function to update all medications (both user doses and global medications)
        const updateAllMedications = async () => {
          try {
            const allMedications = await firebaseService.getAllUserMedications()
            setDashboardData(prev => ({ ...prev, doses: allMedications }))
          } catch (error) {
            console.error('Error fetching medications:', error)
          }
        }

        // Set up real-time listeners for both user doses and global medications
        const unsubscribeDoses = firebaseService.onUserDosesChange(async (doses) => {
          await updateAllMedications()
        })

        const unsubscribeGlobalMedications = firebaseService.onGlobalMedicationsChange(async (medications) => {
          await updateAllMedications()
        })
        
        // Initial load of all medications
        await updateAllMedications()
        
        const unsubscribeNotifications = firebaseService.onUserNotificationsChange((notifications) => {
          const notificationArray = Object.entries(notifications || {})
            .map(([id, notification]) => ({ id, ...notification }))
            .sort((a, b) => b.timestamp - a.timestamp)
          
          const unreadCount = notificationArray.filter(n => !n.read).length
          
          setDashboardData(prev => ({ 
            ...prev, 
            notifications: notificationArray,
            unreadCount 
          }))
        })
        
        const unsubscribeDispenser = firebaseService.onPillDispenserStatusChange((dispenserStatus) => {
          setDashboardData(prev => ({ ...prev, dispenserStatus }))
        })
        
        unsubscribeFunctions = [unsubscribeDoses, unsubscribeGlobalMedications, unsubscribeNotifications, unsubscribeDispenser]
        setLoading(false)
        
      } catch (error) {
        console.error('Error initializing app:', error)
        setLoading(false)
      }
    }

    initializeApp()

    return () => {
      unsubscribeFunctions.forEach(unsubscribe => unsubscribe())
    }
  }, [])

  const handleGetAdvice = useCallback(async (doseId: string) => {
    setLoadingAdvice(true)
    setSelectedDose(doseId)
    
    try {
      const response = await fetch('/api/missed-dose-advisor', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ doseId }),
      })
      
      const data = await response.json()
      
      if (data.success) {
        setAdvice(data.advice)
      } else {
        console.error('Error getting advice:', data.error)
      }
    } catch (error) {
      console.error('Error fetching advice:', error)
    } finally {
      setLoadingAdvice(false)
    }
  }, [])

  const markNotificationAsRead = useCallback(async (notificationId: string) => {
    try {
      await fetch('/api/notifications', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ notificationId, markAsRead: true }),
      })
    } catch (error) {
      console.error('Error marking notification as read:', error)
    }
  }, [])

  const handleMedicationFormSubmit = useCallback(() => {
    setShowMedicationForm(false)
    // The real-time listeners will automatically update the data
  }, [])

  // Show medication form if requested
  if (showMedicationForm) {
    return (
      <EnhancedMedicationForm 
        onSubmit={handleMedicationFormSubmit}
        onCancel={() => setShowMedicationForm(false)}
      />
    )
  }

  const getConnectionStatus = () => {
    if (!dashboardData.dispenserStatus) return { status: 'unknown', color: 'gray' }
    
    const lastSeen = new Date(dashboardData.dispenserStatus.lastSeen)
    const now = new Date()
    const timeDiff = now.getTime() - lastSeen.getTime()
    const minutesAgo = Math.floor(timeDiff / (1000 * 60))
    
    if (minutesAgo <= 5) return { status: 'online', color: 'green' }
    if (minutesAgo <= 15) return { status: 'poor', color: 'yellow' }
    return { status: 'offline', color: 'red' }
  }

  const getUrgencyColor = (urgency: string) => {
    switch (urgency) {
      case 'low': return 'bg-green-100 text-green-800 border-green-200'
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200'
      case 'critical': return 'bg-red-100 text-red-800 border-red-200'
      default: return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-4 border-cyan-400 border-t-transparent mx-auto mb-4"></div>
          <div className="text-cyan-400 text-xl font-semibold animate-pulse">
            Connecting to PillDoseBuddy...
          </div>
        </div>
      </div>
    )
  }

  const connectionStatus = getConnectionStatus()
  const upcomingDoses = Object.entries(dashboardData.doses)
    .filter(([_, dose]) => dose.status === 'upcoming')
    .slice(0, 5)
  
  const missedDoses = Object.entries(dashboardData.doses)
    .filter(([_, dose]) => dose.status === 'missed')
  
  const takenDoses = Object.entries(dashboardData.doses)
    .filter(([_, dose]) => dose.status === 'taken')

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 text-white">
      <div className="max-w-7xl mx-auto p-6 space-y-8">
        {/* Modern Header with Language Selector */}
        <div className="text-center space-y-4 py-8 relative">
          {/* Language Selector */}
          <div className="absolute top-0 right-0">
            <select 
              value={currentLanguage} 
              onChange={(e) => setCurrentLanguage(e.target.value as 'en' | 'hi')}
              className="bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white backdrop-blur-sm focus:ring-2 focus:ring-cyan-400 focus:border-transparent text-sm"
            >
              <option value="en" className="bg-slate-800">{t('english')}</option>
              <option value="hi" className="bg-slate-800">{t('hindi')}</option>
            </select>
          </div>
          
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="bg-gradient-to-r from-cyan-400 to-blue-500 p-4 rounded-2xl shadow-2xl animate-pulse">
              <Pill className="h-10 w-10 text-white" />
            </div>
          </div>
          <h1 className="text-5xl font-bold text-white drop-shadow-lg">
            <span className="bg-gradient-to-r from-cyan-400 via-blue-400 to-cyan-300 bg-clip-text text-transparent">
              {t('appName')}
            </span>
          </h1>
          <p className="text-white text-xl font-medium drop-shadow-md">{t('tagline')}</p>
          <div className="flex items-center justify-center gap-2 mt-4">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            <span className="text-cyan-300 font-medium">{t('aiPowered')}</span>
          </div>
        </div>

        {/* Member Selection */}
        <div className="backdrop-blur-lg bg-white/10 border border-white/20 rounded-xl p-6 shadow-2xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="bg-gradient-to-r from-cyan-400 to-blue-500 p-3 rounded-full">
                <Users className="h-6 w-6 text-white" />
              </div>
              <div>
                <h3 className="text-xl font-semibold text-white">
                  {translations[language].goodMorning}, {selectedMember === 'sung' ? translations[language].you : selectedMember === 'family1' ? translations[language].familyMember1 : translations[language].familyMember2}
                </h3>
                <p className="text-gray-300">{translations[language].medicationSchedule}</p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <select 
                value={selectedMember} 
                onChange={(e) => setSelectedMember(e.target.value)}
                className="bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white backdrop-blur-sm focus:ring-2 focus:ring-cyan-400 focus:border-transparent"
              >
                <option value="sung" className="bg-slate-800">{translations[language].you} (Sung)</option>
                <option value="family1" className="bg-slate-800">{translations[language].familyMember1}</option>
                <option value="family2" className="bg-slate-800">{translations[language].familyMember2}</option>
              </select>
              <Button className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white">
                <Users className="w-4 h-4 mr-2" />
                {translations[language].addMember}
              </Button>
            </div>
          </div>
        </div>

        {/* AI Health Assistant Section */}
        <div className="backdrop-blur-lg bg-gradient-to-r from-cyan-500/10 to-blue-500/10 border border-cyan-500/30 rounded-xl p-6 shadow-2xl">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <div className="bg-gradient-to-r from-cyan-400 to-blue-500 p-3 rounded-xl shadow-lg animate-pulse">
                <Activity className="h-6 w-6 text-white" />
              </div>
              <div>
                <h3 className="text-xl font-semibold text-white">{translations[language].aiHealthAssistant}</h3>
                <p className="text-cyan-300">{translations[language].aiDescription}</p>
              </div>
            </div>
            <Badge className="bg-green-500/20 text-green-400 border-green-500/30 px-3 py-1">
              <div className="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse"></div>
              {translations[language].active}
            </Badge>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="backdrop-blur-sm bg-white/5 p-4 rounded-xl border border-white/10">
              <div className="flex items-center gap-2 mb-2">
                <Activity className="h-5 w-5 text-cyan-400" />
                <span className="font-semibold text-white">{translations[language].smartAnalysis}</span>
              </div>
              <p className="text-sm text-gray-300">{translations[language].smartAnalysisDesc}</p>
            </div>
            <div className="backdrop-blur-sm bg-white/5 p-4 rounded-xl border border-white/10">
              <div className="flex items-center gap-2 mb-2">
                <AlertTriangle className="h-5 w-5 text-orange-400" />
                <span className="font-semibold text-white">{translations[language].smartAlerts}</span>
              </div>
              <p className="text-sm text-gray-300">{translations[language].smartAlertsDesc}</p>
            </div>
            <div className="backdrop-blur-sm bg-white/5 p-4 rounded-xl border border-white/10">
              <div className="flex items-center gap-2 mb-2">
                <CheckCircle className="h-5 w-5 text-green-400" />
                <span className="font-semibold text-white">{translations[language].healthInsights}</span>
              </div>
              <p className="text-sm text-gray-300">{translations[language].healthInsightsDesc}</p>
            </div>
          </div>
        </div>

        {/* Enhanced Status Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {/* Dispenser Status */}
          <Card className={`backdrop-blur-lg bg-white/10 border border-white/20 hover:bg-white/20 transition-all duration-500 hover:scale-105 hover:shadow-2xl ${
            connectionStatus.status === 'online' 
              ? 'shadow-green-500/20' 
              : 'shadow-red-500/20'
          }`}>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className={`p-3 rounded-xl ${
                  connectionStatus.status === 'online' 
                    ? 'bg-green-500/20 shadow-green-500/30' 
                    : 'bg-red-500/20 shadow-red-500/30'
                } shadow-lg`}>
                  {connectionStatus.status === 'online' ? (
                    <Wifi className="h-6 w-6 text-green-400" />
                  ) : (
                    <WifiOff className="h-6 w-6 text-red-400" />
                  )}
                </div>
                <div>
                  <p className="font-semibold text-white">{translations[language].smartDispenser}</p>
                  <p className={`text-sm font-medium capitalize ${
                    connectionStatus.status === 'online' ? 'text-green-400' : 'text-red-400'
                  }`}>
                    {connectionStatus.status}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Notifications */}
          <Card className="backdrop-blur-lg bg-white/10 border border-white/20 hover:bg-white/20 transition-all duration-500 hover:scale-105 hover:shadow-2xl shadow-cyan-500/20">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-xl bg-cyan-500/20 shadow-cyan-500/30 shadow-lg">
                  <Bell className="h-6 w-6 text-cyan-400" />
                </div>
                <div>
                  <p className="font-semibold text-white">{translations[language].notifications}</p>
                  <p className="text-sm text-cyan-400 font-medium">
                    {dashboardData.unreadCount} {translations[language].unread}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Missed Doses */}
          <Card className="backdrop-blur-lg bg-white/10 border border-white/20 hover:bg-white/20 transition-all duration-500 hover:scale-105 hover:shadow-2xl shadow-orange-500/20">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-xl bg-orange-500/20 shadow-orange-500/30 shadow-lg">
                  <AlertTriangle className="h-6 w-6 text-orange-400" />
                </div>
                <div>
                  <p className="font-semibold text-white">{translations[language].missedDoses}</p>
                  <p className="text-sm text-orange-400 font-medium">
                    {missedDoses.length} {translations[language].pending}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Adherence Rate */}
          <Card className="backdrop-blur-lg bg-white/10 border border-white/20 hover:bg-white/20 transition-all duration-500 hover:scale-105 hover:shadow-2xl shadow-purple-500/20">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-xl bg-purple-500/20 shadow-purple-500/30 shadow-lg">
                  <TrendingUp className="h-6 w-6 text-purple-400" />
                </div>
                <div>
                  <p className="font-semibold text-white">{translations[language].adherence}</p>
                  <p className="text-sm text-purple-400 font-medium">
                    {Math.round((takenDoses.length / (takenDoses.length + missedDoses.length + 1)) * 100)}%
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Enhanced Missed Doses Alert */}
        {missedDoses.length > 0 && (
          <Card className="backdrop-blur-lg bg-gradient-to-r from-red-500/10 to-orange-500/10 border border-red-500/30 shadow-2xl">
            <CardHeader>
              <CardTitle className="text-red-400 flex items-center gap-3 text-xl">
                <div className="p-2 rounded-xl bg-red-500/20 shadow-red-500/30 shadow-lg">
                  <AlertTriangle className="h-6 w-6 text-red-400" />
                </div>
                {translations[language].missedDosesAttention}
                <Badge className="bg-red-500/20 text-red-400 border-red-500/30 ml-auto">
                  {missedDoses.length} {translations[language].pending}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {missedDoses.map(([doseId, dose]) => {
                const delay = firebaseService.calculateDoseDelay(dose.time)
                return (
                  <div key={doseId} className="backdrop-blur-sm bg-white/5 p-6 rounded-xl border border-white/10 hover:bg-white/10 transition-all duration-300">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="p-3 rounded-xl bg-cyan-500/20 shadow-cyan-500/30 shadow-lg">
                          <Pill className="h-6 w-6 text-cyan-400" />
                        </div>
                        <div>
                          <p className="font-semibold text-white text-lg">{dose.name}</p>
                          <p className="text-sm text-gray-200">
                            {translations[language].scheduled}: {new Date(dose.time).toLocaleString()}
                          </p>
                          <p className="text-sm text-red-400 font-medium">
                            {translations[language].missedBy}: {delay.displayText}
                          </p>
                          {dose.conditions && (
                            <p className="text-sm text-purple-400">
                              {translations[language].conditions}: {dose.conditions}
                            </p>
                          )}
                        </div>
                      </div>
                      <Button 
                        onClick={() => handleGetAdvice(doseId)}
                        disabled={loadingAdvice && selectedDose === doseId}
                        className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-medium px-6 py-2 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                      >
                        {loadingAdvice && selectedDose === doseId ? (
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        ) : (
                          translations[language].getAiAdvice
                        )}
                      </Button>
                    </div>
                  </div>
                )
              })}
            </CardContent>
          </Card>
        )}

        {/* Enhanced AI Advice Modal */}
        {advice && selectedDose && (
          <Card className="backdrop-blur-lg bg-gradient-to-br from-white/10 to-cyan-500/5 border border-cyan-500/30 shadow-2xl">
            <CardHeader className="bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-t-lg">
              <CardTitle className="flex items-center gap-3 text-xl text-white">
                <div className="p-2 rounded-xl bg-cyan-500/20 shadow-cyan-500/30 shadow-lg">
                  <Activity className="h-6 w-6 text-cyan-400" />
                </div>
                {translations[language].aiMedicationAdvice}
                <Badge variant="outline" className="bg-cyan-500/20 text-cyan-400 border-cyan-500/30 ml-auto">
                  {advice.urgency.toUpperCase()}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6 p-6">
              <div className="backdrop-blur-sm bg-white/5 p-4 rounded-xl border border-white/10">
                <h4 className="font-semibold mb-3 text-cyan-400 flex items-center gap-2">
                  <span className="w-2 h-2 bg-cyan-400 rounded-full animate-pulse"></span>
                  {translations[language].aiRecommendation}:
                </h4>
                <p className="text-lg font-semibold bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent">
                  {advice.recommendation.replace(/_/g, ' ').toUpperCase()}
                </p>
              </div>
              
              <div className="backdrop-blur-sm bg-white/5 p-4 rounded-xl border border-white/10">
                <h4 className="font-semibold mb-3 text-blue-300">{translations[language].reasoning}:</h4>
                <p className="text-gray-200">{advice.reasoning}</p>
              </div>
              
              <div className="backdrop-blur-sm bg-white/5 p-4 rounded-xl border border-white/10">
                <h4 className="font-semibold mb-3 text-green-400">{translations[language].nextSteps}:</h4>
                <ul className="space-y-2">
                  {advice.nextSteps.map((step, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="bg-cyan-500/20 text-cyan-400 text-xs font-bold px-2 py-1 rounded-full mt-0.5">
                        {index + 1}
                      </span>
                      <span className="text-gray-200">{step}</span>
                    </li>
                  ))}
                </ul>
              </div>
              
              {advice.warnings && advice.warnings.length > 0 && (
                <Alert className="backdrop-blur-sm bg-amber-500/10 border border-amber-500/30">
                  <AlertTriangle className="h-4 w-4 text-amber-400" />
                  <AlertDescription>
                    <strong className="text-amber-400">{translations[language].importantWarnings}:</strong>
                    <ul className="list-disc list-inside mt-1 text-amber-300">
                      {advice.warnings.map((warning, index) => (
                        <li key={index}>{warning}</li>
                      ))}
                    </ul>
                  </AlertDescription>
                </Alert>
              )}
              
              <Alert className="backdrop-blur-sm bg-blue-500/10 border border-blue-500/30">                  <AlertDescription className="text-blue-200">
                    <strong className="text-blue-300">{translations[language].medicalDisclaimer}:</strong> {translations[language].disclaimerText}
                </AlertDescription>
              </Alert>
              
              <div className="flex gap-3 pt-2">
                <Button 
                  onClick={() => {
                    setAdvice(null)
                    setSelectedDose(null)
                  }}
                  variant="outline"
                  className="backdrop-blur-sm bg-white/10 border-white/20 text-white hover:bg-white/20 flex-1"
                >
                  {translations[language].close}
                </Button>
                {advice.recommendation === 'contact_healthcare' && (
                  <Button className="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white flex-1">
                    <AlertTriangle className="w-4 h-4 mr-2" />
                    {translations[language].contactHealthcare}
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Today's Medications */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Today's Schedule */}
          <div className="lg:col-span-2">
            <Card className="backdrop-blur-lg bg-white/10 border border-white/20 shadow-2xl">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-3 text-xl text-white">
                    <div className="p-2 rounded-xl bg-green-500/20 shadow-green-500/30 shadow-lg">
                      <Calendar className="h-6 w-6 text-green-400" />
                    </div>
                    {translations[language].todaysMedications}
                  </CardTitle>
                  <Button 
                    onClick={() => setShowMedicationForm(true)}
                    className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-medium px-4 py-2 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                    size="sm"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    {translations[language].addMedication}
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {Object.entries(dashboardData.doses).filter(([_, dose]) => {
                  const today = new Date().toDateString();
                  const doseDate = new Date(dose.time).toDateString();
                  return today === doseDate;
                }).length > 0 ? (
                  Object.entries(dashboardData.doses).filter(([_, dose]) => {
                    const today = new Date().toDateString();
                    const doseDate = new Date(dose.time).toDateString();
                    return today === doseDate;
                  }).map(([doseId, dose]) => (
                    <div key={doseId} className="backdrop-blur-sm bg-white/5 p-4 rounded-xl border border-white/10 hover:bg-white/10 transition-all duration-300 group">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          <div className="flex items-center justify-center w-12 h-12 rounded-full bg-gradient-to-r from-cyan-400 to-blue-500 text-white font-bold text-lg">
                            {dose.name.charAt(0).toUpperCase()}
                          </div>
                          <div>
                            <p className="font-semibold text-white text-lg">{dose.name}</p>
                            <p className="text-sm text-gray-300">
                              {translations[language].chamber} {dose.chamber} • {new Date(dose.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                            </p>
                            {dose.conditions && (
                              <p className="text-xs text-purple-400 mt-1 bg-purple-500/20 px-2 py-1 rounded-full inline-block">
                                {dose.conditions}
                              </p>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <Badge 
                            variant="outline" 
                            className={`${
                              dose.status === 'taken' ? 'bg-green-500/20 text-green-400 border-green-500/30' :
                              dose.status === 'missed' ? 'bg-red-500/20 text-red-400 border-red-500/30' :
                              'bg-cyan-500/20 text-cyan-400 border-cyan-500/30'
                            } px-3 py-1`}
                          >
                            {dose.status === 'taken' ? translations[language].taken :
                             dose.status === 'missed' ? translations[language].missed : translations[language].upcoming}
                          </Badge>
                          
                          {/* Action Buttons */}
                          <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                            <Button
                              size="sm"
                              variant="outline"
                              className="bg-white/10 border-white/20 text-white hover:bg-white/20 h-8 w-8 p-0"
                              title={translations[language].editMedication}
                            >
                              <Settings className="h-3 w-3" />
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              className="bg-red-500/20 border-red-500/30 text-red-400 hover:bg-red-500/30 h-8 w-8 p-0"
                              title={translations[language].deleteMedication}
                            >
                              <XCircle className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="text-center py-12">
                    <div className="bg-slate-500/20 p-6 rounded-full w-24 h-24 mx-auto mb-4 flex items-center justify-center">
                      <Calendar className="h-12 w-12 text-slate-400" />
                    </div>
                    <p className="text-gray-200 mb-6 text-lg">{translations[language].noMedicationsToday}</p>
                    <Button 
                      onClick={() => setShowMedicationForm(true)}
                      className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-medium px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      {translations[language].scheduleTodayMedications}
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Smart Dispenser Status */}
          <Card className="backdrop-blur-lg bg-white/10 border border-white/20 shadow-2xl">
            <CardHeader>
              <CardTitle className="flex items-center gap-3 text-xl text-white">
                <div className="p-2 rounded-xl bg-blue-500/20 shadow-blue-500/30 shadow-lg">
                  <Activity className="h-6 w-6 text-blue-400" />
                </div>
                {translations[language].bedroomDispenser}
                <Badge className="bg-green-500/20 text-green-400 border-green-500/30 ml-auto">
                  <div className="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse"></div>
                  Online • 10m ago
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h4 className="text-white font-semibold mb-3">{translations[language].pillsRemaining}</h4>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-cyan-400">A (Aspirin)</span>
                    <div className="flex items-center gap-2">
                      <div className="w-24 h-2 bg-slate-600 rounded-full">
                        <div className="w-1/2 h-full bg-cyan-400 rounded-full"></div>
                      </div>
                      <span className="text-white text-sm">15/30</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-blue-400">B (Metformin)</span>
                    <div className="flex items-center gap-2">
                      <div className="w-24 h-2 bg-slate-600 rounded-full">
                        <div className="w-1/4 h-full bg-blue-400 rounded-full"></div>
                      </div>
                      <span className="text-white text-sm">8/30</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-red-400">C (Atorvastatin)</span>
                    <div className="flex items-center gap-2">
                      <div className="w-24 h-2 bg-slate-600 rounded-full">
                        <div className="w-1/8 h-full bg-red-400 rounded-full"></div>
                      </div>
                      <span className="text-white text-sm">4/30</span>
                      <Badge className="bg-red-500/20 text-red-400 border-red-500/30 text-xs">{translations[language].low}</Badge>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-purple-400">D (Dilprolene)</span>
                    <div className="flex items-center gap-2">
                      <div className="w-24 h-2 bg-slate-600 rounded-full">
                        <div className="w-1/10 h-full bg-purple-400 rounded-full"></div>
                      </div>
                      <span className="text-white text-sm">3/30</span>
                      <Badge className="bg-red-500/20 text-red-400 border-red-500/30 text-xs">{translations[language].low}</Badge>
                    </div>
                  </div>
                </div>
              </div>
              
              <Button className="w-full bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-medium py-2 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300">
                <Activity className="w-4 h-4 mr-2" />
                {translations[language].syncDispenser}
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Enhanced Dashboard Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Medicine Report */}
          <Card className="backdrop-blur-lg bg-white/10 border border-white/20 shadow-2xl">
            <CardHeader>
              <CardTitle className="flex items-center gap-3 text-xl text-white">
                <div className="p-2 rounded-xl bg-purple-500/20 shadow-purple-500/30 shadow-lg">
                  <TrendingUp className="h-6 w-6 text-purple-400" />
                </div>
                {t('medicineReport')}
                <Button
                  size="sm"
                  className="bg-white/10 border-white/20 text-white hover:bg-white/20 ml-auto"
                  variant="outline"
                >
                  {t('viewFullReport')}
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="backdrop-blur-sm bg-white/5 p-4 rounded-xl border border-white/10 text-center">
                  <p className="text-2xl font-bold text-green-400">78%</p>
                  <p className="text-sm text-gray-300">{translations[language].adherenceRate}</p>
                </div>
                <div className="backdrop-blur-sm bg-white/5 p-4 rounded-xl border border-white/10 text-center">
                  <p className="text-2xl font-bold text-cyan-400">92%</p>
                  <p className="text-sm text-gray-300">{translations[language].onTimeRate}</p>
                </div>
              </div>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-white">{translations[language].thisWeek}</span>
                  <span className="text-green-400">+5% {translations[language].improvement}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-white">{translations[language].missedDosesReport}</span>
                  <span className="text-orange-400">3 {translations[language].thisMonth}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-white">{translations[language].nextRefill}</span>
                  <span className="text-cyan-400">{translations[language].inDays}</span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* All Medications Overview */}
          <Card className="backdrop-blur-lg bg-white/10 border border-white/20 shadow-2xl">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center gap-3 text-xl text-white">
                  <div className="p-2 rounded-xl bg-cyan-500/20 shadow-cyan-500/30 shadow-lg">
                    <Pill className="h-6 w-6 text-cyan-400" />
                  </div>
                  {translations[language].allMedications}
                  <Badge className="bg-slate-500/20 text-slate-300 border-slate-500/30">
                    {Object.entries(dashboardData.doses).length} {translations[language].total}
                  </Badge>
                </CardTitle>
                <Button 
                  onClick={() => setShowMedicationForm(true)}
                  className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-medium px-4 py-2 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                  size="sm"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  {translations[language].addNew}
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4 max-h-96 overflow-y-auto">
              {Object.entries(dashboardData.doses).length > 0 ? (
                Object.entries(dashboardData.doses).map(([doseId, dose]) => (
                  <div key={doseId} className="backdrop-blur-sm bg-white/5 p-4 rounded-xl border border-white/10 hover:bg-white/10 transition-all duration-300 group">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="flex items-center justify-center w-12 h-12 rounded-full bg-gradient-to-r from-cyan-400 to-blue-500 text-white font-bold text-lg">
                          {dose.name.charAt(0).toUpperCase()}
                        </div>
                        <div>
                          <p className="font-semibold text-white text-lg">{dose.name}</p>
                          <p className="text-sm text-gray-300">
                            {translations[language].chamber} {dose.chamber} • {new Date(dose.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                          </p>
                          {dose.conditions && (
                            <p className="text-xs text-purple-400 mt-1 bg-purple-500/20 px-2 py-1 rounded-full inline-block">
                              {dose.conditions}
                            </p>
                          )}
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <Badge 
                          variant="outline" 
                          className={`${
                            dose.status === 'taken' ? 'bg-green-500/20 text-green-400 border-green-500/30' :
                            dose.status === 'missed' ? 'bg-red-500/20 text-red-400 border-red-500/30' :
                            'bg-cyan-500/20 text-cyan-400 border-cyan-500/30'
                          } px-3 py-1`}
                        >
                          {dose.status === 'taken' ? (
                            <>
                              <CheckCircle className="w-3 h-3 mr-1" />
                              {translations[language].taken}
                            </>
                          ) : dose.status === 'missed' ? (
                            <>
                              <AlertTriangle className="w-3 h-3 mr-1" />
                              {translations[language].missed}
                            </>
                          ) : (
                            <>
                              <Clock className="w-3 h-3 mr-1" />
                              {translations[language].upcoming}
                            </>
                          )}
                        </Badge>
                        
                        {/* Action Buttons */}
                        <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                          <Button
                            size="sm"
                            variant="outline"
                            className="bg-white/10 border-white/20 text-white hover:bg-white/20 h-8 w-8 p-0"
                            title={translations[language].editMedication}
                            onClick={() => handleEditMedication(doseId)}
                          >
                            <Settings className="h-3 w-3" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            className="bg-red-500/20 border-red-500/30 text-red-400 hover:bg-red-500/30 h-8 w-8 p-0"
                            title={translations[language].deleteMedication}
                            onClick={() => handleDeleteMedication(doseId)}
                          >
                            <XCircle className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-12">
                  <div className="bg-slate-500/20 p-6 rounded-full w-24 h-24 mx-auto mb-4 flex items-center justify-center">
                    <Pill className="h-12 w-12 text-slate-400" />
                  </div>
                  <p className="text-gray-200 mb-6 text-lg">{translations[language].noMedicationsFound}</p>
                  <Button 
                    onClick={() => setShowMedicationForm(true)}
                    className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-medium px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    {translations[language].addFirstMedication}
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Notifications and Additional Info */}
        <div className="grid grid-cols-1 xl:grid-cols-3 gap-8">
          <Card className="backdrop-blur-lg bg-white/10 border border-white/20 shadow-2xl">
            <CardHeader>
              <CardTitle className="flex items-center gap-3 text-xl text-white">
                <div className="p-2 rounded-xl bg-blue-500/20 shadow-blue-500/30 shadow-lg">
                  <Bell className="h-6 w-6 text-blue-400" />
                </div>
                {translations[language].recentNotifications}
                {dashboardData.unreadCount > 0 && (
                  <Badge className="bg-red-500/20 text-red-400 border-red-500/30">
                    {dashboardData.unreadCount} {translations[language].new}
                  </Badge>
                )}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3 max-h-96 overflow-y-auto">
              {dashboardData.notifications.length > 0 ? (
                dashboardData.notifications.slice(0, 10).map((notification) => (
                  <div 
                    key={notification.id} 
                    className={`p-3 rounded-xl border transition-all duration-300 hover:shadow-sm cursor-pointer ${
                      notification.read 
                        ? 'backdrop-blur-sm bg-white/5 border-white/10' 
                        : 'backdrop-blur-sm bg-cyan-500/10 border-cyan-500/30 hover:bg-cyan-500/20'
                    }`}
                    onClick={() => !notification.read && markNotificationAsRead(notification.id)}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <p className={`text-sm ${
                          notification.read ? 'text-gray-300' : 'text-cyan-200 font-medium'
                        }`}>
                          {notification.message}
                        </p>
                        <p className="text-xs text-gray-400 mt-1">
                          {new Date(notification.timestamp).toLocaleString()}
                        </p>
                      </div>
                      {!notification.read && (
                        <div className="w-2 h-2 bg-cyan-400 rounded-full mt-2 animate-pulse"></div>
                      )}
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-8">
                  <div className="bg-slate-500/20 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                    <Bell className="h-8 w-8 text-slate-400" />
                  </div>
                  <p className="text-gray-300">{translations[language].noNotifications}</p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Quick AI Actions */}
          <Card className="backdrop-blur-lg bg-gradient-to-r from-green-500/10 to-cyan-500/10 border border-green-500/30 shadow-2xl">
            <CardHeader>
              <CardTitle className="flex items-center gap-3 text-xl text-white">
                <div className="p-2 rounded-xl bg-green-500/20 shadow-green-500/30 shadow-lg animate-pulse">
                  <Activity className="h-6 w-6 text-green-400" />
                </div>
                {translations[language].aiQuickActions}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button className="w-full bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-medium py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 justify-start">
                <Activity className="w-4 h-4 mr-3" />
                {translations[language].analyzeHealthTrends}
              </Button>
              <Button className="w-full bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white font-medium py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 justify-start">
                <AlertTriangle className="w-4 h-4 mr-3" />
                {translations[language].getMissedDoseAdvice}
              </Button>
              <Button className="w-full bg-gradient-to-r from-green-500 to-teal-600 hover:from-green-600 hover:to-teal-700 text-white font-medium py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 justify-start">
                <CheckCircle className="w-4 h-4 mr-3" />
                {translations[language].optimizeSchedule}
              </Button>
            </CardContent>
          </Card>
        </div>
        {dashboardData.dispenserStatus && (
          <Card className="backdrop-blur-lg bg-gradient-to-r from-purple-500/10 to-indigo-500/10 border border-purple-500/30 shadow-2xl">
            <CardHeader>
              <CardTitle className="flex items-center gap-3 text-xl text-white">
                <div className="p-2 rounded-xl bg-purple-500/20 shadow-purple-500/30 shadow-lg">
                  <Activity className="h-6 w-6 text-purple-400" />
                </div>
                {translations[language].dispenserDetails}
                <Badge className={`ml-auto ${
                  dashboardData.dispenserStatus.isOnline 
                    ? 'bg-green-500/20 text-green-400 border-green-500/30' 
                    : 'bg-red-500/20 text-red-400 border-red-500/30'
                }`}>
                  <div className={`w-2 h-2 rounded-full mr-2 ${
                    dashboardData.dispenserStatus.isOnline ? 'bg-green-400 animate-pulse' : 'bg-red-400'
                  }`}></div>
                  {dashboardData.dispenserStatus.isOnline ? translations[language].online : translations[language].offline}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="backdrop-blur-sm bg-white/5 p-6 rounded-xl border border-white/10 text-center">
                <div className="bg-gradient-to-r from-green-400/20 to-green-500/20 p-3 rounded-full w-fit mx-auto mb-3">
                  <CheckCircle className="h-6 w-6 text-green-400" />
                </div>
                <p className="font-semibold text-white mb-1">{translations[language].connectionStatus}</p>
                <p className={`text-lg font-bold ${
                  dashboardData.dispenserStatus.isOnline ? 'text-green-400' : 'text-red-400'
                }`}>
                  {dashboardData.dispenserStatus.isOnline ? translations[language].connected : translations[language].disconnected}
                </p>
              </div>
              <div className="backdrop-blur-sm bg-white/5 p-6 rounded-xl border border-white/10 text-center">
                <div className="bg-gradient-to-r from-blue-400/20 to-blue-500/20 p-3 rounded-full w-fit mx-auto mb-3">
                  <Clock className="h-6 w-6 text-blue-400" />
                </div>
                <p className="font-semibold text-white mb-1">{translations[language].lastDispense}</p>
                <p className="text-lg font-bold text-gray-200">{dashboardData.dispenserStatus.lastDispenseTime}</p>
                <p className={`text-sm font-medium ${
                  dashboardData.dispenserStatus.lastDispenseSuccessful ? 'text-green-400' : 'text-red-400'
                }`}>
                  {dashboardData.dispenserStatus.lastDispenseSuccessful ? translations[language].successful : translations[language].failed}
                </p>
              </div>
              <div className="backdrop-blur-sm bg-white/5 p-6 rounded-xl border border-white/10 text-center">
                <div className="bg-gradient-to-r from-purple-400/20 to-purple-500/20 p-3 rounded-full w-fit mx-auto mb-3">
                  <Wifi className="h-6 w-6 text-purple-400" />
                </div>
                <p className="font-semibold text-white mb-1">{translations[language].lastSeen}</p>
                <p className="text-lg font-bold text-gray-200">
                  {new Date(dashboardData.dispenserStatus.lastSeen).toLocaleTimeString()}
                </p>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
